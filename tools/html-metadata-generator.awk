#!/usr/bin/awk -f
#
# This script parses the books' HTML to build metadata used by other scripts
# to fix various content issues. The output is an importable awk array. 
#
# Usage:
#   $ awk -f tools/html-metadata-generator.awk -- $(tools/find-html.sh) > ./html-metadata.awk

BEGIN {
    figure_id = "";
    section_id = "";
    order_id = 0;

    # The book uses roman numerals for part numbers, and it has 5 parts.
    romans[1] = "I";
    romans[2] = "II";
    romans[3] = "III";
    romans[4] = "IV";
    romans[5] = "V";

    d = 0;  # debug
}

END {
    # Sort only for stable ordering of committed metadata (the
    # tools algorithms don't need the sorted order),
    asorti(metadata, ordered, "compare_by_id");

    print "# This file was auto-generated by tools/html-metadata-generator.awk.";
    print "# It is meant to be @include'd by AWK scripts in tools/."
    print "BEGIN {";
    for (i in ordered) {
	id = ordered[i];  # asorti() above ordered metadata's indexes (id values).
	if (d) {
	    attr = "filename"; printf("%s=%s, ", attr, metadata[id][attr]);
	    attr = "type"; printf("%s=%s, ", attr, metadata[id][attr]);
	    attr = "text"; printf("%s=%s, ", attr, metadata[id][attr]);
	    printf("id=%s,", id);
	    print "";
	} else {
	    attr = "filename"; printf("metadata[\"%s\"][\"%s\"] = \"%s\";\n", id, attr, metadata[id][attr]);
	    attr = "type"; printf("metadata[\"%s\"][\"%s\"] = \"%s\";\n", id, attr, metadata[id][attr]);
	    attr = "text"; printf("metadata[\"%s\"][\"%s\"] = \"%s\";\n", id, attr, metadata[id][attr]);
	    attr = "toc"; printf("metadata[\"%s\"][\"%s\"] = \"%s\";\n", id, attr, metadata[id][attr]);
	    attr = "order"; printf("metadata[\"%s\"][\"%s\"] = \"%s\";\n", id, attr, metadata[id][attr]);
	    attr = "id"; printf("metadata[\"%s\"][\"%s\"] = \"%s\";\n", id, attr, id);  # Helps pivot the array. 
	}
    }
    print "}"
}

/\<figure id=".+"/ {
    if (d) print "figure found: " $0
    if (match($0, /id="(.+)"/, matches)) {
	figure_id = matches[1];
    }
    if (d) print "  figure_id=" figure_id
}
/\<\/figure>/ {
    figure_id = "";
}

/\<img / {
    if (figure_id == "") { next; } else { if (d) print "  figure img found: " $0 }
    match($0, /src="([^"]+)"/, matches)
    file = matches[1];
    metadata[figure_id]["filename"] = file;
    match($0, /images\/bsrs_([0-9]{2})([0-9]{2})\.png/, matches);
    metadata[figure_id]["text"] = "Figure " (matches[1] + 0) "-" (matches[2] + 0);
    metadata[figure_id]["type"] = "figure";

    order_id = order_id + 1;
    metadata[figure_id]["order"] = order_id;    
}

/\<section .+ id=".+">/ {  # <section xmlns="http://www.w3.org/1999/xhtml" data-type="chapter" id="design_for_resilience">
    if (d) print "section found: " $0
    if (match($0, /id="([^"]+)"/, matches)) {
	section_id = matches[1];
        if (d) print "  section_id=" section_id
    }
    if (match($0, /data-type="([^"]+)"/, matches)) {
        type = matches[1];
	if (type != "part" && type != "chapter") { 
            metadata[section_id]["type"] = type;
	    metadata[section_id]["text"] = "[heading not seen]";
	} else {
            metadata[section_id]["type"] = type;
            match(FILENAME, /([a-z]+)([0-9]{1,2})\.html/, matches);
	    if (matches[1] == "ch") { metadata[section_id]["text"] = "Chapter " (matches[2] + 0); }
	    if (matches[1] == "part") {
		n = (matches[2] + 0);
		if (n in romans) { n = romans[n]; }
		metadata[section_id]["text"] = "Part " n;
	    }
	}
    }
    # In the filename, omit any leading path since the HTML uses local directory references.
    metadata[section_id]["filename"] = gensub(/(.*\/)([a-z]+[0-9]*\.html)/, "\\2", "g", FILENAME);

    order_id = order_id + 1;
    metadata[section_id]["order"] = order_id;
}
/\<[hH][1-9].*>.+/ {  # <h1>Defense in Depth</h1>
    if (section_id == "") { next; } else { if (d) print "  section heading found for " section_id ": " $0 }
    match($0, /\<[hH][1-9].*>([^\<]+)/, matches);
    if (metadata[section_id]["type"] == "part") {  # "Part II. Designing Systems".
	metadata[section_id]["toc"] = metadata[section_id]["text"] ". " matches[1]
    } else if (metadata[section_id]["type"] == "chapter") {  # "8. Design for Resilience".
	match(metadata[section_id]["text"], /Chapter ([0-9]+)/, matches_chapter);
	metadata[section_id]["toc"] = matches_chapter[1] ". " matches[1];
    } else {
	#if (metadata[section_id]["type"] ~ "sect") {}
	metadata[section_id]["text"] = matches[1];
	metadata[section_id]["toc"] = matches[1];
    }
    section_id = "";
}

function compare_by_id(i1, v1, i2, v2, l, r)
{
    l = i1
    r = i2

    if (l < r)
	return -1
    else if (l == r)
	return 0
    else
	return 1
}
